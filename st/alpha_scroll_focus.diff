diff st/config.def.h st-orig/config.def.h
8d7
< static char *font = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";
9a9
> static char *font = "Liberation Mono:pixelsize=15:antialias=true:autohint=true";
95a96,98
> /* bg opacity */
> float alpha = 0.9, alphaUnfocused = 0.4;
> 
122a126
> 	"black",
130c134
< unsigned int defaultfg = 7;
---
> unsigned int defaultfg = 255;
134c138
< 
---
> unsigned int bg = 0, bgUnfocused = 0;
176a181,183
> 	
> 	{ XK_ANY_MOD,           Button4, kscrollup,      {.i = 1},      0, /* !alt */ -1 },
> 		{ XK_ANY_MOD,           Button5, kscrolldown,    {.i = 1},      0, /* !alt */ -1 },
201a209,210
> 	{ ShiftMask,            XK_Page_Up,     kscrollup,      {.i = -1} },
> 	{ ShiftMask,            XK_Page_Down,   kscrolldown,    {.i = -1} },
Only in st-orig/: config.h
diff st/config.mk st-orig/config.mk
19c19
< LIBS = -L$(X11LIB) -lm -lrt -lX11 -lutil -lXft \
---
> LIBS = -L$(X11LIB) -lm -lrt -lX11 -lutil -lXft -lXrender\
Only in st: FAQ
Only in st: .git
Only in st: LEGACY
Only in st: LICENSE
diff st/Makefile st-orig/Makefile
33c33
< 	rm -f st $(OBJ) st-$(VERSION).tar.gz
---
> 	rm -f st $(OBJ) st-$(VERSION).tar.gz config.h
Only in st: README
Only in st-orig/: st
diff st/st.c st-orig/st.c
37a38
> #define HISTSIZE      2000
44a46,48
> #define TLINE(y)		((y) < term.scr ? term.hist[((y) + term.histi - \
> 				term.scr + HISTSIZE + 1) % HISTSIZE] : \
> 				term.line[(y) - term.scr])
117a122,124
> 	Line hist[HISTSIZE]; /* history buffer */
> 	int histi;    /* history index */
> 	int scr;      /* scroll back */
187,188c194,195
< static void tscrollup(int, int);
< static void tscrolldown(int, int);
---
> static void tscrollup(int, int, int);
> static void tscrolldown(int, int, int);
196d202
< static void tfulldirt(void);
419c425
< 	if (term.line[y][i - 1].mode & ATTR_WRAP)
---
> 	if (TLINE(y)[i - 1].mode & ATTR_WRAP)
422c428
< 	while (i > 0 && term.line[y][i - 1].u == ' ')
---
> 	while (i > 0 && TLINE(y)[i - 1].u == ' ')
531c537
< 		prevgp = &term.line[*y][*x];
---
> 		prevgp = &TLINE(*y)[*x];
546c552
< 				if (!(term.line[yt][xt].mode & ATTR_WRAP))
---
> 				if (!(TLINE(yt)[xt].mode & ATTR_WRAP))
553c559
< 			gp = &term.line[newy][newx];
---
> 			gp = &TLINE(newy)[newx];
574c580
< 				if (!(term.line[*y-1][term.col-1].mode
---
> 				if (!(TLINE(*y-1)[term.col-1].mode
581c587
< 				if (!(term.line[*y][term.col-1].mode
---
> 				if (!(TLINE(*y)[term.col-1].mode
612c618
< 			gp = &term.line[y][sel.nb.x];
---
> 			gp = &TLINE(y)[sel.nb.x];
615c621
< 			gp = &term.line[y][sel.nb.y == y ? sel.nb.x : 0];
---
> 			gp = &TLINE(y)[sel.nb.y == y ? sel.nb.x : 0];
618c624
< 		last = &term.line[y][MIN(lastx, linelen-1)];
---
> 		last = &TLINE(y)[MIN(lastx, linelen-1)];
853a860,862
> 	Arg arg = (Arg) { .i = term.scr };
> 
> 	kscrolldown(&arg);
1065c1074,1107
< tscrolldown(int orig, int n)
---
> kscrolldown(const Arg* a)
> {
> 	int n = a->i;
> 
> 	if (n < 0)
> 		n = term.row + n;
> 
> 	if (n > term.scr)
> 		n = term.scr;
> 
> 	if (term.scr > 0) {
> 		term.scr -= n;
> 		selscroll(0, -n);
> 		tfulldirt();
> 	}
> }
> 
> void
> kscrollup(const Arg* a)
> {
> 	int n = a->i;
> 
> 	if (n < 0)
> 		n = term.row + n;
> 
> 	if (term.scr <= HISTSIZE-n) {
> 		term.scr += n;
> 		selscroll(0, n);
> 		tfulldirt();
> 	}
> }
> 
> void
> tscrolldown(int orig, int n, int copyhist)
1071a1114,1120
> 	if (copyhist) {
> 		term.histi = (term.histi - 1 + HISTSIZE) % HISTSIZE;
> 		temp = term.hist[term.histi];
> 		term.hist[term.histi] = term.line[term.bot];
> 		term.line[term.bot] = temp;
> 	}
> 
1081c1130,1131
< 	selscroll(orig, n);
---
> 	if (term.scr == 0)
> 		selscroll(orig, n);
1085c1135
< tscrollup(int orig, int n)
---
> tscrollup(int orig, int n, int copyhist)
1091a1142,1151
> 	if (copyhist) {
> 		term.histi = (term.histi + 1) % HISTSIZE;
> 		temp = term.hist[term.histi];
> 		term.hist[term.histi] = term.line[orig];
> 		term.line[orig] = temp;
> 	}
> 
> 	if (term.scr > 0 && term.scr < HISTSIZE)
> 		term.scr = MIN(term.scr + n, HISTSIZE-1);
> 
1101c1161,1162
< 	selscroll(orig, -n);
---
> 	if (term.scr == 0)
> 		selscroll(orig, -n);
1130c1191
< 		tscrollup(term.top, 1);
---
> 		tscrollup(term.top, 1, 1);
1295c1356
< 		tscrolldown(term.c.y, n);
---
> 		tscrolldown(term.c.y, n, 0);
1302c1363
< 		tscrollup(term.c.y, n);
---
> 		tscrollup(term.c.y, n, 0);
1739c1800
< 		tscrollup(term.top, csiescseq.arg[0]);
---
> 		tscrollup(term.top, csiescseq.arg[0], 0);
1743c1804
< 		tscrolldown(term.top, csiescseq.arg[0]);
---
> 		tscrolldown(term.top, csiescseq.arg[0], 0);
2255c2316
< 			tscrollup(term.top, 1);
---
> 			tscrollup(term.top, 1, 1);
2268c2329
< 			tscrolldown(term.top, 1);
---
> 			tscrolldown(term.top, 1, 1);
2478c2539
< 	int i;
---
> 	int i, j;
2514a2576,2583
> 	for (i = 0; i < HISTSIZE; i++) {
> 		term.hist[i] = xrealloc(term.hist[i], col * sizeof(Glyph));
> 		for (j = mincol; j < col; j++) {
> 			term.hist[i][j] = term.c.attr;
> 			term.hist[i][j].u = ' ';
> 		}
> 	}
> 
2573c2642
< 		xdrawline(term.line[y], x1, y, x2);
---
> 		xdrawline(TLINE(y), x1, y, x2);
2594,2595c2663,2665
< 	xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
< 			term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
---
> 	if (term.scr == 0)
> 		xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
> 				term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
diff st/st.h st-orig/st.h
81a82
> void tfulldirt(void);
83a85,86
> void kscrolldown(const Arg *);
> void kscrollup(const Arg *);
89a93
> int tisaltscr(void);
125a130
> extern float alpha, alphaUnfocused;
Only in st-orig/: st.o
Only in st: TODO
diff st/x.c st-orig/x.c
107a108
> 	int depth; /* bit depth */
245a247
> static char *opt_alpha = NULL;
254a257,258
> static int focused = 0;
> 
739c743
< 			DefaultDepth(xw.dpy, xw.scr));
---
> 			xw.depth);
777a782,791
> xloadalpha(void)
> {
> 	float const usedAlpha = focused ? alpha : alphaUnfocused;
> 	if (opt_alpha) alpha = strtof(opt_alpha, NULL);
> 	dc.col[defaultbg].color.alpha = (unsigned short)(0xffff * usedAlpha);
> 	dc.col[defaultbg].pixel &= 0x00FFFFFF;
> 	dc.col[defaultbg].pixel |= (unsigned char)(0xff * usedAlpha) << 24;
> }
> 
> void
780d793
< 	int i;
784,789c797,799
< 	if (loaded) {
< 		for (cp = dc.col; cp < &dc.col[dc.collen]; ++cp)
< 			XftColorFree(xw.dpy, xw.vis, xw.cmap, cp);
< 	} else {
< 		dc.collen = MAX(LEN(colorname), 256);
< 		dc.col = xmalloc(dc.collen * sizeof(Color));
---
> 	if (!loaded) {
> 		dc.collen = 1 + (defaultbg = MAX(LEN(colorname), 256));
> 		dc.col = xmalloc((dc.collen) * sizeof(Color));
792c802
< 	for (i = 0; i < dc.collen; i++)
---
> 	for (int i = 0; i+1 < dc.collen; ++i)
798a809,812
> 	if (dc.collen) // cannot die, as the color is already loaded.
> 		xloadcolor(focused ?bg :bgUnfocused, NULL, &dc.col[defaultbg]);
> 
> 	xloadalpha();
1107a1122,1123
> 	XWindowAttributes attr;
> 	XVisualInfo vis;
1112c1128,1138
< 	xw.vis = XDefaultVisual(xw.dpy, xw.scr);
---
> 
> 	if (!(opt_embed && (parent = strtol(opt_embed, NULL, 0)))) {
> 		parent = XRootWindow(xw.dpy, xw.scr);
> 		xw.depth = 32;
> 	} else {
> 		XGetWindowAttributes(xw.dpy, parent, &attr);
> 		xw.depth = attr.depth;
> 	}
> 
> 	XMatchVisualInfo(xw.dpy, xw.scr, xw.depth, TrueColor, &vis);
> 	xw.vis = vis.visual;
1122c1148
< 	xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
---
> 	xw.cmap = XCreateColormap(xw.dpy, parent, xw.vis, None);
1142,1143d1167
< 	if (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))
< 		parent = XRootWindow(xw.dpy, xw.scr);
1145c1169
< 			win.w, win.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,
---
> 			win.w, win.h, 0, xw.depth, InputOutput,
1151,1154c1175,1176
< 	dc.gc = XCreateGC(xw.dpy, parent, GCGraphicsExposures,
< 			&gcvalues);
< 	xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,
< 			DefaultDepth(xw.dpy, xw.scr));
---
> 	xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h, xw.depth);
> 	dc.gc = XCreateGC(xw.dpy, xw.buf, GCGraphicsExposures, &gcvalues);
1750a1773,1777
> 		if (!focused) {
> 			focused = 1;
> 			xloadcols();
> 			tfulldirt();
> 		}
1756a1784,1788
> 		if (focused) {
> 			focused = 0;
> 			xloadcols();
> 			tfulldirt();
> 		}
2008a2041,2043
> 	case 'A':
> 		opt_alpha = EARGF(usage());
> 		break;
2059a2095
> 	defaultbg = MAX(LEN(colorname), 256);
Only in st-orig/: x.o
